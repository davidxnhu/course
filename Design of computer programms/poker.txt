# -----------
# User Instructions
# 
# Modify the hand_rank function so that it returns the
# correct output for the remaining hand types, which are:
# full house, flush, straight, three of a kind, two pair,
# pair, and high card hands. 
# 
# Do this by completing each return statement below.
#
# You may assume the following behavior of each function:
#
# straight(ranks): returns True if the hand is a straight.
# flush(hand):     returns True if the hand is a flush.
# kind(n, ranks):  returns the first rank that the hand has
#                  exactly n of. For A hand with 4 sevens 
#                  this function would return 7.
# two_pair(ranks): if there is a two pair, this function 
#                  returns their corresponding ranks as a 
#                  tuple. For example, a hand with 2 twos
#                  and 2 fours would cause this function
#                  to return (4, 2).
# card_ranks(hand) returns an ORDERED tuple of the ranks 
#                  in a hand (where the order goes from
#                  highest to lowest rank). 
#
# Since we are assuming that some functions are already
# written, this code will not RUN. Clicking SUBMIT will 
# tell you if you are correct.

def poker(hands):
    "Return the best hand: poker([hand,...]) => hand"
    return max(hands, key=hand_rank)

def hand_rank(hand):
    ranks = card_ranks(hand)
    if straight(ranks) and flush(hand):            # straight flush
        return (8, max(ranks))
    elif kind(4, ranks):                           # 4 of a kind
        return (7,kind(4, ranks), kind(1, ranks))
    elif kind(3, ranks) and kind(2, ranks):        # full house
        return (6,kind(3,ranks),kind(2,ranks))
    elif flush(hand):                              # flush
        return (5,ranks)
    elif straight(ranks):                          # straight
        return (4,max(ranks))
    elif kind(3, ranks):                           # 3 of a kind
        return (3,kind(3,ranks),ranks)
    elif two_pair(ranks):                          # 2 pair
        return (2,two_pair(ranks),ranks)
    elif kind(2, ranks):                           # kind
        return (kind(2,ranks),ranks)
    else:                                          # high card
        return ranks

def card_ranks(hand):
    rst=[]
    for entry in hand:
        if entry[0]=='T':
            rst.append(10)
        elif entry[0]=='J':
            rst.append(11)
        elif entry[0]=='Q':
            rst.append(12)
        elif entry[0]=='K':
            rst.append(13)
        elif entry[0]=='A':
            rst.append(14)
        else:
            rst.append(int(entry[0]))
    rst.sort(reverse=True)
    return rst
    

def kind(n,ranks):
    dict={}
    for card in ranks:
        if card not in dict:
            dict[card]=1
        else:
            dict[card]+=1
    
    for card in dict:
        if dict[card]==n:
            return card
    return None

def straight(ranks):
    for i in range (1,5):
        if ranks[i]!=ranks[i-1]-1:
            return False
    
    return True

def flush(hand):
    for i in range (1,5):
        if hand[i][1]!=hand[i-1][1]:
            return False
    
    return True

def two_pair(ranks):
    temp={}
    for entry in ranks:
        if entry not in temp:
            temp[entry]=1
        else:
            temp[entry]+=1
    rst=[]
    for entry in temp:
        if temp[entry]==2:
            rst.append(entry)
    
    rst.sort(reverse=True)
    return rst

    

def test():
    "Test cases for the functions in poker program"
    sf = "6C 7C 8C 9C TC".split() # Straight Flush
    fk = "9D 9H 9S 9C 7D".split() # Four of a Kind
    fh = "TD TC TH 7C 7D".split() # Full House
    first = "5D 6C 7H 8H 9S".split()
    second = "9C 9D 2H 2S TD".split()
    #assert poker([sf, fk, fh]) == sf
    #assert poker([fk, fh]) == fk
   # assert poker([fh, fh]) == fh
    #assert poker([sf]) == sf
    #assert poker([sf] + 99*[fh]) == sf
    print hand_rank(second)
    return 'tests pass'

test()